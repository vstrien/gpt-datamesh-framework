trigger:
  branches:
    include:
    - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureSubscription: 'your-azure-subscription-name-or-id'
  resourceGroupName: 'your-resource-group-name'
  location: 'your-resource-location'
  databricksWorkspaceName: 'your-databricks-workspace-name'
  managedIdentityId: 'your-managed-identity-id'

stages:
- stage: DeployDatabricks
  displayName: 'Deploy Azure Databricks using Terraform'
  jobs:
  - job: DeployDatabricks
    displayName: 'Deploy Azure Databricks using Terraform'
    steps:
    - checkout: self
    - task: AzureCLI@2
      displayName: 'Install Terraform'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install terraform -y
          terraform -v
    - task: AzureCLI@2
      displayName: 'Deploy Databricks using Terraform'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: 'iac'
        inlineScript: |
          az account set --subscription $(azureSubscription)
          terraform init
          terraform apply -auto-approve -var="resource_group_name=$(resourceGroupName)" -var="location=$(location)" -var="databricks_workspace_name=$(databricksWorkspaceName)" -var="managed_identity_id=$(managedIdentityId)"
    - task: AzureCLI@2
      displayName: 'Configure Databricks Git Integration'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az extension add --name databricks
          databricksWorkspaceId=$(az databricks workspace show --name $(databricksWorkspaceName) --resource-group $(resourceGroupName) --query id -o tsv)
          databricksToken=$(az databricks workspace token create --resource-group $(resourceGroupName) --name $(databricksWorkspaceName) --lifetime-seconds 86400 --query tokenValue -o tsv)
          databricks configure --token "$databricksToken" "$(az databricks workspace show --name $(databricksWorkspaceName) --resource-group $(resourceGroupName) --query workspaceUrl -o tsv)"
          echo "Deploying Databricks notebooks from Git repository..."
          databricks workspace import_dir "/your-git-repo-path/databricks-notebooks" "/Shared" --overwrite
